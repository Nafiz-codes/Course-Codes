Task:
Given a simple undirected unweighted graph with N nodes and M edges, find the
minimum number of edges necessary to remove from the graph to make the graph
have no cycle remaining. The nodes are numbered from 1 to N.

Input:
First line contains the number of tests. The description of each test follows.
Each test is described by (M+1) lines. First line contains N, M. Each of the
next M lines contains U[i] and V[i] indicating that there is an edge
between U[i] and V[i].

Output:
For each test in the given order, print an integer, the answer you are asked
to find in this task, in one line.

Example-1 (batch-1):
Input (stdin):
2
8 6
1 2
2 3
4 5
6 7
7 8
2 6
4 6
1 2
1 3
1 4
2 3
2 4
3 4
Output (stdout):
0
3

Example-2 (batch-2):
Input (stdin):
2
9 15
1 2
2 3
3 4
4 1
3 5
5 6
6 7
8 9
9 1
1 8
7 1
1 6
9 3
3 1
5 1
2 1
1 2
Output (stdout):
7
0

Scoring:
Batch   Score   Tests   Constraints
1       0.1     2       1<=N<=10, 0<=M<=min(N(N-1)/2,10)
2       0.1     2       1<=N<=10, 0<=M<=min(N(N-1)/2,20)
3       0.2     20000   1<=N<=20, 0<=M<=min(N(N-1)/2,100)
4       0.3     20      1<=N<=20000, 0<=M<=min(N(N-1)/2,30000)
5       0.3     4       1<=N<=200000, 0<=M<=min(N(N-1)/2,300000)
------------------------
5       1       Total

Time limit: 1s (cpp) or 1.5s (java) or 3s (py) per batch.

Hints:
- Use fast input/output methods.
- 0.2 score for passing only sample batches.
- O(N+M) solution is expected.